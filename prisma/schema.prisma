generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  username String @unique

  createdAt DateTime @default(now())

  @@map("admins")
}

model Student {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String?   @unique
  address   String
  image     String?
  bloodType String    @map("blood_type")
  sex       SexType
  birthday  DateTime?

  createdAt DateTime @default(now())

  // one-to-many
  parent   Parent @relation(fields: [parentId], references: [id])
  parentId String @db.ObjectId
  class    Class  @relation(fields: [classId], references: [id])
  classId  String @db.ObjectId
  grade    Grade  @relation(fields: [gradeId], references: [id])
  gradeId  String @db.ObjectId

  // many-to-many
  results     Result[]
  attendances Attendance[]

  @@map("students")
}

model Parent {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  username String  @unique
  name     String
  surname  String
  email    String? @unique
  phone    String  @unique
  address  String
  sex      SexType

  createdAt DateTime @default(now())

  // many-to-many
  students Student[]

  @@map("parents")
}

model Teacher {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String?   @unique
  address   String
  image     String?
  bloodType String    @map("blood_type")
  sex       SexType
  birthday  DateTime?

  createdAt DateTime @default(now())

  // many-to-many
  subjectIDs String[]  @db.ObjectId
  subjects   Subject[] @relation(fields: [subjectIDs], references: [id])

  lessons Lesson[]
  classes Class[]

  @@map("teachers")
}

model Subject {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique

  // many-to-many
  teacherIDs String[]  @db.ObjectId
  teachers   Teacher[] @relation(fields: [teacherIDs], references: [id])

  lessons Lesson[]

  @@map("subjects")
}

model Lesson {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  day       Day
  startTime DateTime
  endTime   DateTime

  // one-to-many
  subject   Subject? @relation(fields: [subjectId], references: [id])
  subjectId String?  @db.ObjectId
  class     Class?   @relation(fields: [classId], references: [id])
  classId   String?  @db.ObjectId
  teacher   Teacher? @relation(fields: [teacherId], references: [id])
  teacherId String?  @db.ObjectId

  // many-to-many
  exams       Exam[]
  assignments Assignment[]
  attendances Attendance[]

  @@map("lessons")
}

model Grade {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  level Int    @unique

  // one-to-many
  students Student[]
  classes  Class[]

  @@map("grades")
}

model Class {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name     String @unique
  capacity Int

  // one-to-many
  supervisor   Teacher? @relation(fields: [supervisorId], references: [id])
  supervisorId String?  @db.ObjectId
  grade        Grade?   @relation(fields: [gradeId], references: [id])
  gradeId      String?  @db.ObjectId

  // many-to-many
  students      Student[]
  lessons       Lesson[]
  events        Event[]
  announcements Announcement[]

  @@map("classes")
}

model Exam {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  startTime DateTime
  endTime   DateTime

  // one-to-many
  lesson   Lesson @relation(fields: [lessonId], references: [id])
  lessonId String @db.ObjectId

  //many-to-many
  results Result[]

  @@map("exams")
}

model Assignment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  startDate DateTime
  dueDate   DateTime

  // one-to-many
  lesson   Lesson @relation(fields: [lessonId], references: [id])
  lessonId String @db.ObjectId

  // many-to-many
  results Result[]

  @@map("assignments")
}

model Result {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  score Int

  createdAt DateTime @default(now())

  // one-to-many
  exam         Exam?       @relation(fields: [examId], references: [id])
  examId       String?     @db.ObjectId
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  assignmentId String?     @db.ObjectId
  student      Student     @relation(fields: [studentId], references: [id])
  studentId    String      @db.ObjectId

  @@map("results")
}

model Attendance {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  date    DateTime
  present Boolean

  // one-to-many
  student   Student @relation(fields: [studentId], references: [id])
  studentId String  @db.ObjectId
  lesson    Lesson  @relation(fields: [lessonId], references: [id])
  lessonId  String  @db.ObjectId

  @@map("attendances")
}

model Event {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  startDate   DateTime
  endDate     DateTime

  // one-to-many
  class   Class?  @relation(fields: [classId], references: [id])
  classId String? @db.ObjectId

  @@map("events")
}

model Announcement {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  date        DateTime

  // one-to-many
  class   Class?  @relation(fields: [classId], references: [id])
  classId String? @db.ObjectId

  @@map("annoucements")
}

enum SexType {
  male
  female
}

enum Day {
  Monday
  Thuesday
  Wednesday
  Thursday
  Friday
}
